import java.util.List;

public class Heapsort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	
	public static <T extends Comparable<? super T> > void sort(List<T> array) {
	        
		BuildHeap(array);
		for(int i = array.size(); i > 0; i--) {
			T temp = array.get(1);
			array.set(1, array.get(i));
			array.set(i, temp);
		}
		
		
		
		
		BuildHeap(A)
	    for i = n to 1
	        swap(A[1], A[i])
	        n = n - 1
	        Heapify(A, 1)
		
		
		
	}
	
	private static <T extends Comparable<? super T> > void BuildHeap(List<T> array) {
		
		for(int i = array.size()/2; i > 0; i--) {
			Heapify(array,i);
		}
	}

	private static <T extends Comparable<? super T> > void Heapify(List<T> array, int i) {
		
		int left = 2 * i;
		int right = 2 * array.size() + 1;
		int max;
		
		if(left <= array.size() && array.get(left).compareTo(array.get(i)) > 0) {
			max = left;
		}
		else {
			max = i;
		}
		
		if(right <= array.size() && array.get(right).compareTo(array.get(max)) > 0) {
			max = right;
		}
		
		if(max != i) {
			T temp = array.get(i);
			array.set(i, array.get(max));
			array.set(max, temp);
			Heapify(array,max);
		}
		
	}
	
}
